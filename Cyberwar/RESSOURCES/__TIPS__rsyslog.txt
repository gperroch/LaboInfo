ConfigurÃ© dans /etc/rsyslog.conf
input -> ruleset -> action
1 ruleset = 0+ rules
1 rule = 1 filter + 1 action list
	filter matches => action list is executed
1 action list = 1+ actions
rules evaluated from the first to the last, always inside the ruleset

Commentaires: # ou /* */.
Flow control statements: Control structures / Filter conditions.
Data Manipulation Statements finished by set, unset or reset.
Once loaded, inputs are defined via the input() object.
Outputs (a.k.a actions) are invoked via the object action(type='type'...). Type is mandatory and must contain the name of the pluggin invoked.
Every output uses a template (e.g. the database writer expect its template to be a proper SQL statement).
Templates are specified by template(parameters) {list-descriptions}.
	=> parameter name that defines the template;
	=> parameter type that defines the template type;
	=> The template type doesn't affect what an output plugin can do with it;
	=> Types: list, subtree, string, plugin
		=> List: constant statements + property statements
			=> Constant statements
				e.g. constant(value="text" outname="IWantThisInMyDB") (\ooo octal, \xhh hexadecimal and others are accepted)
				- value=""
				- outname=""
			=> Property statements
				- name (name of the property to access)
				- outname (output field name (for structured outputs)
				- dateformat (dateformat to use (only for date-related properties))
				- date.inUTC
				- caseconversion (=lower/upper)
				- controlcharacters (specify how to handle control characters (=escape/space/drop))
				- securepath (use for creating pathnames suitable for use in dynafile templates)
				- format (specify format on field basis (=csv/json/jsonf/jsonr/jsonfr))
				- position.from (obtain substring from the position specified (1 is the first position))
				- position.to (obtain substring up to this position)
				- position.relativeToEnd
				- fixedwidth
				- compressspace
				- field.number (obtain this field match)
				- field.delimiter (decimal value of delimiter character for field extraction)
				- regex.expression
				- regex.type (=ERE/BRE)
				- regex.nomatchmode (what to do if we have no match)
				- regex.match (match to use)
				- regex.submatch (submatch to use)
				- droplastlf (drop a trailing LF if it is present)
				- mandatory (signifies a field as mandatory. If "on" the field will always be present in data passed to the 
				structured outputs. If "off", empty fields will not be passed.)
				- spifno1stsp
		=> Subtree: most useful for outputs that know how to process hierarchical structure (like ommongodb). Parameter subtree must be
		specified (tells wich subtree to use). Subtree can also be used with text-based outputs.
		=> String: mandatory parameter "string" (holds the template's string to be applied). This string is a mix of constant text and
		replacement variables. The text between "%" (variables) is interpreted by the rsyslog property replacer.
		=> Plugin: template is generated by a plugin. Mandatory parameter "plugin" containing the name of the plugin used. Plugins must
		be loaded before used.
		=> Options: 
			- option.sql
			- option.stdsql
			- option.json
			- option.casesensitive
Some template names are reserved.


